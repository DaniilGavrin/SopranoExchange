"""
    –ò–º–ø–æ—Ä—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫

    telebot - –ì–ª–∞–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
    telebot.callback_data - –∏–º–ø–æ—Ä—Ç callback –∫–ª–∞—Å—Å–æ–≤
    types - –º–æ–¥—É–ª—å –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    accept_user - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buytron - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∫—É–ø–∫–æ–π tron
    contact - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    menu - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é
    profil - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    trx - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–æ–º
    set_trx - –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –æ —Å–º–µ–Ω–µ trx –∞–¥—Ä–µ—Å–∞
    
    db - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db_conn - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    cryptopay - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cryptopay API
    kassa - –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π

    settings - –Ω–∞—Å—Ç—Ä–æ—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞
"""
from telebot import *
from telebot.callback_data import *

from accept_user import accept_user
import database.db as db
from menu.tronbuymenu.buycrypto.buy_BTC import buy_BTC
from menu.tronbuymenu.buycrypto.buy_TRX import buy_TRX
from menu.tronbuymenu.buycrypto.buy_SOL import buy_SOL
from menu.tronbuymenu.buycrypto.buy_XMR import buy_XMR
from menu.tronbuymenu.buycrypto.buy_ETH import buy_ETH
from menu.tronbuymenu.buycrypto.buy_LTC import buy_LTC
from menu.tronbuymenu.buycrypto.buy_USDT import buy_USDT
from menu.tronbuymenu.tronmenu import tronbuymenu
from menu.profil import *
from menu.profil.all_addr import all_addr
from menu.profil.change_pay.change_pay import change_pay
from menu.trans_fer import transfer_btc, transfer_eth, transfer_ltc, transfer_sol, transfer_trx, transfer_usdt, transfer_xrp
from menu.transfer import transfer
from kassa import *

from menu.profil.change_pay import buy_balance
import menu.trx as trx
import menu.menu as menu
import menu.profil.profil as profil
from menu.profil.addr import set_sol, set_trx, set_btc, set_eth, set_ltc, set_usdt, set_xrp
import menu.contact as contact
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import admin.delete_user as delete_user
import admin.change_balance as change_balance
import admin.change_admin as change_admin
from settings import settings
from settings.settings import TOKEN, ADMIN_USER

"""
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å telebot API
    Args:
    - –¢–æ–∫–µ–Ω –±–æ—Ç–∞, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (const)
    - parse_mode - —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ "HTML" - –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤ HTML
"""
bot = TeleBot(
    TOKEN, parse_mode="HTML"
    )


CHANNELS = [-1002050877052] 

def check_subscriptions(user_id):
    for channel in CHANNELS:
        try:
            status = bot.get_chat_member(channel, user_id).status
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ {channel}: {status}")
            if status in ["left", "kicked"]:
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {channel}: {e}")
            return False
    return True
    
@bot.message_handler(commands=['start'])
def start(message):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '/start'. –û–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –µ–º—É –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ê –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ—Ç –Ω–∞ accept_user –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

    Parameters:
        message (telegram.Message): –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Returns:
        None
    """
    user_id = message.chat.id
    if check_subscriptions(user_id):  
        bot.send_message(user_id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.")
        user_id = message.chat.id
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', callback_data='accept_user')
        markup.add(button)
        bot.send_message(-4633769276, f'–ë—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}')
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ —Ä—É–±–ª–µ–π –Ω–∞ TRX. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=markup)
    else:
        markup = InlineKeyboardMarkup()
        for channel in CHANNELS:
            markup.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))

        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n@SopranoCommunity", reply_markup=markup)


@bot.message_handler(commands=['get'])
def get(message):
    user_id = message.chat.id
    bot.send_message(message.chat.id, f'–í–∞—à id {user_id}')
    bot.send_message(-4633769276, f'–ë—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /get –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}')

@bot.message_handler(commands=['admin'])
def admin(message):
    user_id = message.chat.username
    if str(user_id) == settings.ADMIN_USER:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!')
        bot.send_message(-4633769276, f'–í–Ω–∏–º–∞–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞—Ö–æ–¥ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ \n{user_id}\n@{message.chat.username}')
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='delete_user')
        button1 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='change_balance')
        button2 = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='change_admin')
        markup.add(button, button1, button2)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        bot.send_message(-4633769276, f"–í–Ω–∏–º–∞–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ü–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ \n{user_id}\n@{message.chat.username}")

@bot.message_handler(content_types=['text'])
def text(message):
    if (message.text == "üìÅ –ì–ª–∞–≤–Ω–∞—è"):
        menu.glavnoe_menu(bot, message)
    elif (message.text == "cancel"):
        menu.glavnoe_menu(bot, message)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_subscription_callback(call):
    user_id = call.message.chat.id
    if check_subscriptions(user_id):
        bot.send_message(user_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.")
    else:
        bot.send_message(user_id, "‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        if call.data == 'accept_user':
            print('accept_user')
            accept_user.accept_user(bot, call.message)

        elif call.data == 'calculator':
            trx.kurs(bot, call.message)

        elif call.data == 'contact':
            contact.contact(bot, call.message)

        elif call.data == 'profile':
            profil.profile(bot, call.message)
        elif call.data == 'tronbuymemu':
            tronbuymenu(bot, call.message)

        elif call.data == 'all_addr':
            all_addr(bot, call.message)
        elif call.data =='set_trx':
            set_trx.set_trx(bot, call.message)
        elif call.data == 'set_usdt':
            set_usdt.set_usdt(bot, call.message)
        elif call.data == 'set_btc':
            set_btc.set_btc(bot, call.message)
        elif call.data == 'set_ltc':
            set_ltc.set_ltc(bot, call.message)
        elif call.data == 'set_sol':
            set_sol.set_sol(bot, call.message)
        elif call.data == 'set_xrp':
            set_xrp.set_xrp(bot, call.message)
        elif call.data == 'set_eth':
            set_eth.set_eth(bot, call.message)
        
        elif call.data == 'buy_BTC':
            buy_BTC(bot, call.message)
        elif call.data == 'buy_TRX':
            buy_TRX(bot, call.message)
        elif call.data == 'buy_SOL':
            buy_SOL(bot, call.message)
        elif call.data == 'buy_XMR':
            buy_XMR(bot, call.message)
        elif call.data == 'buy_ETH':
            buy_ETH(bot, call.message)
        elif call.data == 'buy_LTC':
            buy_LTC(bot, call.message)
        elif call.data == 'buy_USDT':
            buy_USDT(bot, call.message)

        elif call.data == 'buy_balance':
            buy_balance.buy(bot, call.message)
        elif call.data == 'buy_balance2':
            buy_balance.buy2(bot, call.message)

        elif call.data == 'change_pay':
            change_pay(bot, call.message)

        elif call.data == 'delete_user':
            delete_user.delete_user(bot, call.message)

        elif call.data == 'change_balance':
            change_balance.change_balance(bot, call.message)
            
        elif call.data == 'change_admin':
            change_admin.change_admin(bot, call.message)

        elif call.data == 'transfer':
            transfer(bot, call.message)
        elif call.data =='transfer_trx':
            transfer_trx.transfer_trx(bot, call.message)
        elif call.data == 'transfer_usdt':
            transfer_usdt.transfer_usdt(bot, call.message)
        elif call.data == 'transfer_btc':
            transfer_btc.transfer_btc(bot, call.message)
        elif call.data == 'transfer_ltc':
            transfer_ltc.transfer_ltc(bot, call.message)
        elif call.data == 'transfer_sol':
            transfer_sol.transfer_sol(bot, call.message)
        elif call.data == 'transfer_xrp':
            transfer_xrp.transfer_xrp(bot, call.message)
        elif call.data == 'transfer_eth':
            transfer_eth.transfer_eth(bot, call.message)
        else:
            print('unknown')
            bot.answer_callback_query(call.id, text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
    except Exception as e:
        print(repr(e))

if __name__ == '__main__':
    bot.polling(none_stop=True)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")